@using Ban3.Infrastructures.Indicators
@using Ban3.Productions.Casino.Contracts.Entities
@model IEnumerable<Ban3.Infrastructures.Indicators.Outputs.StockSets>
@{
    Layout = null;
}

<div class="list-group">
    @foreach (var point in Model.OrderBy(o => o.Code))
    {
        var refreshed = StockRealtime.Records.TryGetValue(point.Symbol, out var record);
        var evaluated = point.Evaluation(out var keys, out var val);
        var info = refreshed && record != null ? $"{record.Name} <span class='badge'>{Math.Round(record.ChangePercent, 2)}</span>" : "";
        var className = record?.ChangePercent > 0
            ? "red" 
            : record?.ChangePercent == 0 
                ? "gray" 
                : "green";

        if (evaluated)
            info += $"<span class='badge'>{val}</span>";

        <a href="#" class="list-group-item list-group-item-action lazyLoadButton @className"
           dataUrl="@($"/parts/stock/{@point.Code}")"
           renderElement="onesChartsContainer">@Html.Raw(point.Symbol+info)</a>
    }
</div>
